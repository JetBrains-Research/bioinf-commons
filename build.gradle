buildscript {
    ext.kotlin_version = "1.6.10"

    repositories {
        maven { url("https://repo1.maven.org/maven2") }
        maven { url("https://plugins.gradle.org/m2") }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "kotlin"
apply plugin: "org.jetbrains.kotlin.jvm"

sourceCompatibility = 8
targetCompatibility = sourceCompatibility
compileKotlin { kotlinOptions.jvmTarget = sourceCompatibility }
compileTestKotlin { kotlinOptions.jvmTarget = sourceCompatibility }

repositories {
    maven { url("https://repo1.maven.org/maven2") }
    maven { url("https://plugins.gradle.org/m2") }
}

/**
 * In case when bioinf-commons is imported to another project,
 * it should declare project(":bioinf-commons") with dependencies, otherwise configure root project.
 * Ugly, I know.
 */
if (rootProject == project) {
    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
        compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
        compile("org.jetbrains.kotlinx:kotlinx-support-jdk8:0.1")

        // Logging dependencies
        compile("ch.qos.logback:logback-classic:1.4.12")
        compile("ch.qos.logback:logback-core:1.4.12")

        compile("com.google.guava:guava:32.0.1-jre")
        compile("org.apache.commons:commons-csv:1.10.0")
        compile("com.google.code.gson:gson:2.10.1")
        compile("net.sf.jopt-simple:jopt-simple:5.0.4")
        compile("commons-net:commons-net:3.9.0")
        compile("org.apache.httpcomponents.client5:httpclient5:5.2.1")
        compile("org.jgrapht:jgrapht-core:0.9.2")
        compile("com.fasterxml.jackson.core:jackson-databind:2.15.2")
        compile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2")
        compile("com.github.samtools:htsjdk:3.0.1")
        compile("com.github.broadinstitute:picard:2.18.26")
        compile("org.jline:jline-terminal:3.23.0")
        compile("com.carrotsearch:jsuffixarrays:0.1.0")
        compile("org.jetbrains.bio:big:0.9.1")
        compile("org.jetbrains.bio:viktor:1.0.0")

        testCompile("junit:junit:4.13.2")
        testCompile("org.jetbrains.kotlin:kotlin-test:$kotlin_version")
    }
} else {
    project(":bioinf-commons") {
        configurations {
            testOutput.extendsFrom(testCompile)
        }
        dependencies {
            compile("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
            compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
            compile("org.jetbrains.kotlinx:kotlinx-support-jdk8:0.1")

            // Logging dependencies
            compile("ch.qos.logback:logback-classic:1.4.12")
            compile("ch.qos.logback:logback-core:1.4.12")

            compile("com.google.guava:guava:32.0.1-jre")
            compile("org.apache.commons:commons-csv:1.10.0")
            compile("com.google.code.gson:gson:2.10.1")
            compile("net.sf.jopt-simple:jopt-simple:5.0.4")
            compile("commons-net:commons-net:3.9.0")
            compile("org.apache.httpcomponents.client5:httpclient5:5.2.1")
            compile("org.jgrapht:jgrapht-core:0.9.2")
            compile("com.fasterxml.jackson.core:jackson-databind:2.15.2")
            compile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2")
            compile("com.github.samtools:htsjdk:3.0.1")
            compile("com.github.broadinstitute:picard:2.18.26")
            compile("org.jline:jline-terminal:3.23.0")
            compile("com.carrotsearch:jsuffixarrays:0.1.0")
            compile("org.jetbrains.bio:big:0.9.1")
            compile("org.jetbrains.bio:viktor:1.0.0")

            compile("org.jetbrains.bio:big:0.9.1")
            compile("org.jetbrains.bio:viktor:1.0.0")

            testCompile("junit:junit:4.13.2")
            testCompile("org.jetbrains.kotlin:kotlin-test:$kotlin_version")
            testOutput sourceSets.main.output, sourceSets.test.output
        }
    }
}

private String settingsFolder(final String propertyName, final String folderName) {
    if (!System.hasProperty(propertyName)) {
        return "${rootProject.buildDir}/.tests/$folderName"
    } else {
        return System.getProperty(propertyName)
    }
}

task generateTestOrganism(type: JavaExec) {
    systemProperty "genomes.path", settingsFolder("genomes.path", "genomes")
    systemProperty "experiments.path", settingsFolder("experiments.path", "experiments")
    systemProperty "raw.data.path", settingsFolder("experiments.path", "rawdata")
    systemProperty "caches.path", settingsFolder("genomes.path", "caches")
    systemProperty "logs.path", settingsFolder("experiments.path", "logs")

    description "Generates sequences/indexes/genes/etc for test organism"
    configure {
        main = "org.jetbrains.bio.genome.TestOrganismDataGenerator"
        classpath = sourceSets.main.runtimeClasspath
        enableAssertions = true
        maxHeapSize = "1024m" // Not much RAM is available on TC agents
    }
}

tasks.withType(Test) {
    dependsOn "generateTestOrganism"

    // Continue execution even if tests for some of the
    // sub-projects failed.
    ignoreFailures = true
    maxParallelForks = Runtime.runtime.availableProcessors()
    maxHeapSize = "1024m"

    testLogging.showStandardStreams = true

    systemProperty "genomes.path", settingsFolder("genomes.path", "genomes")
    systemProperty "experiments.path", settingsFolder("experiments.path", "experiments")
    systemProperty "raw.data.path", settingsFolder("experiments.path", "rawdata")
    systemProperty "caches.path", settingsFolder("genomes.path", "caches")
    systemProperty "logs.path", settingsFolder("experiments.path", "logs")
    systemProperty "teamcity.build.checkoutDir", System.getProperty("teamcity.build.checkoutDir")
}

test {
    include "**/*Test.class"
}