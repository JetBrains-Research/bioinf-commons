import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext.kotlin_version = '1.4.21'

    repositories {
        maven { url "https://cache-redirector.jetbrains.com/repo1.maven.org/maven2" }
        maven { url "https://cache-redirector.jetbrains.com/jcenter.bintray.com" }

        // In case of issues with cache redirector:
        // jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.dokka" version "1.4.10.2"
}

apply plugin: 'maven'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'signing'
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'
mainClassName = "org.jetbrains.bio.BioinfToolsCLA"

sourceCompatibility = 1.8
targetCompatibility = sourceCompatibility
compileKotlin { kotlinOptions.jvmTarget = sourceCompatibility }
compileTestKotlin { kotlinOptions.jvmTarget = sourceCompatibility }

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-support-jdk8:0.1'

    // Logging dependencies
    compile("ch.qos.logback:logback-classic:1.2.3")
    compile("ch.qos.logback:logback-core:1.2.3")
    compile "org.slf4j:slf4j-api:1.7.25"

    compile 'com.google.guava:guava:23.6.1-jre'
    compile 'org.apache.commons:commons-csv:1.4'
    compile 'com.google.code.gson:gson:2.7'
    compile 'net.sf.jopt-simple:jopt-simple:5.0.4'
    compile 'commons-net:commons-net:3.5'
    compile 'org.apache.httpcomponents:httpclient:4.5.6'
    compile 'org.jgrapht:jgrapht-core:0.9.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.11'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.11'
    compile 'com.github.samtools:htsjdk:2.10.1'
    compile 'com.github.broadinstitute:picard:2.18.26'
    compile 'org.jline:jline-terminal:3.10.0'

    compile 'org.jetbrains.bio:big:0.9.0'
    compile 'org.jetbrains.bio:viktor:1.0.0'

    testCompile 'junit:junit:4.12'
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

private String settingsFolder(final String propertyName, final String folderName) {
    if (!System.hasProperty(propertyName)) {
        return "${rootProject.buildDir}/.tests/$folderName"
    } else {
        return System.getProperty(propertyName)
    }
}

task generateTestOrganism(type: JavaExec) {
    systemProperty "genomes.path", settingsFolder("genomes.path", "genomes")

    description "Generates sequences/indexes/genes/etc for test organism"
    configure {
        main = "org.jetbrains.bio.genome.TestOrganismDataGenerator"
        classpath = sourceSets.main.runtimeClasspath
        enableAssertions = true
        maxHeapSize = '1024m' // Not much RAM is available on TC agents
    }
}

tasks.withType(Test) {
    dependsOn 'generateTestOrganism'

    // Continue execution even if tests for some of the
    // sub-projects failed.
    ignoreFailures = true
    maxParallelForks = Runtime.runtime.availableProcessors()
    maxHeapSize = "1024m"

    testLogging.showStandardStreams = true
    
    systemProperty "genomes.path", settingsFolder("genomes.path", "genomes")
    systemProperty "experiments.path", settingsFolder("experiments.path", "experiments")
    systemProperty "teamcity.build.checkoutDir", System.getProperty("teamcity.build.checkoutDir")
}

test {
    systemProperty "genomes.path", settingsFolder("genomes.path", "genomes")

    include '**/*Test.class'
}

dokkaJavadoc {
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

jar {
    archivesBaseName = 'bioinf-commons'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar/*, javadocJar*/
}

signing {
    // multiline environment variables are not fun.
    def signingKey = findProperty("signingKey")?.replace("\\n", "\n")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            def ossrhUsername = findProperty("ossrhUsername")
            def ossrhPassword = findProperty("ossrhPassword")

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.groupId = 'org.jetbrains.bio'

            pom.project {
                name 'bioinf-commons'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Bioinformatics library in Kotlin'
                url 'https://github.com/JetBrains-Research/bioinf-commons'

                scm {
                    connection 'scm:git:git@github.com:JetBrains-Research/bioinf-commons.git'
                    developerConnection 'scm:git:git@github.com:JetBrains-Research/bioinf-commons.git'
                    url 'https://github.com/JetBrains-Research/bioinf-commons'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/JetBrains-Research/bioinf-commons/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'oshpynov'
                        name 'Oleg Shpynov'
                        email 'oleg.shpynov@jetbrains.com'
                    }
                    developer {
                        id 'rcherniatchik'
                        name 'Roman Cherniatchik'
                        email 'roman.cherniatchik@jetbrains.com'
                    }
                }
            }
        }
    }
}

wrapper {
    gradleVersion = '6.5'
}

task processBuildProperties(type: Copy) {
    shadowJar.dependsOn name

    // turn of cache for this task
    outputs.upToDateWhen { false }

    // Fix version and build in properties file
    from(sourceSets.main.resources) {
        include 'bioinf.properties'
    }
    into sourceSets.main.output.resourcesDir
    filter(ReplaceTokens, tokens: [
            VERSION: version,
            BUILD: project.buildCounter,
            DATE: new Date().format('MMMM dd, yyyy')
    ])
}

shadowJar {
    baseName = 'bioinf-commons'
    classifier = ''
    zip64 true
}
